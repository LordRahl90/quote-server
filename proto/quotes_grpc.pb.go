// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: proto/quotes.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuoteClient is the client API for Quote service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuoteClient interface {
	GetQuotes(ctx context.Context, in *QuoteRequest, opts ...grpc.CallOption) (Quote_GetQuotesClient, error)
	GetFilteredQuotes(ctx context.Context, in *QuoteRequest, opts ...grpc.CallOption) (Quote_GetFilteredQuotesClient, error)
}

type quoteClient struct {
	cc grpc.ClientConnInterface
}

func NewQuoteClient(cc grpc.ClientConnInterface) QuoteClient {
	return &quoteClient{cc}
}

func (c *quoteClient) GetQuotes(ctx context.Context, in *QuoteRequest, opts ...grpc.CallOption) (Quote_GetQuotesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Quote_ServiceDesc.Streams[0], "/pb.Quote/GetQuotes", opts...)
	if err != nil {
		return nil, err
	}
	x := &quoteGetQuotesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Quote_GetQuotesClient interface {
	Recv() (*QuoteResponse, error)
	grpc.ClientStream
}

type quoteGetQuotesClient struct {
	grpc.ClientStream
}

func (x *quoteGetQuotesClient) Recv() (*QuoteResponse, error) {
	m := new(QuoteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *quoteClient) GetFilteredQuotes(ctx context.Context, in *QuoteRequest, opts ...grpc.CallOption) (Quote_GetFilteredQuotesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Quote_ServiceDesc.Streams[1], "/pb.Quote/GetFilteredQuotes", opts...)
	if err != nil {
		return nil, err
	}
	x := &quoteGetFilteredQuotesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Quote_GetFilteredQuotesClient interface {
	Recv() (*QuoteResponse, error)
	grpc.ClientStream
}

type quoteGetFilteredQuotesClient struct {
	grpc.ClientStream
}

func (x *quoteGetFilteredQuotesClient) Recv() (*QuoteResponse, error) {
	m := new(QuoteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QuoteServer is the server API for Quote service.
// All implementations should embed UnimplementedQuoteServer
// for forward compatibility
type QuoteServer interface {
	GetQuotes(*QuoteRequest, Quote_GetQuotesServer) error
	GetFilteredQuotes(*QuoteRequest, Quote_GetFilteredQuotesServer) error
}

// UnimplementedQuoteServer should be embedded to have forward compatible implementations.
type UnimplementedQuoteServer struct {
}

func (UnimplementedQuoteServer) GetQuotes(*QuoteRequest, Quote_GetQuotesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetQuotes not implemented")
}
func (UnimplementedQuoteServer) GetFilteredQuotes(*QuoteRequest, Quote_GetFilteredQuotesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFilteredQuotes not implemented")
}

// UnsafeQuoteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuoteServer will
// result in compilation errors.
type UnsafeQuoteServer interface {
	mustEmbedUnimplementedQuoteServer()
}

func RegisterQuoteServer(s grpc.ServiceRegistrar, srv QuoteServer) {
	s.RegisterService(&Quote_ServiceDesc, srv)
}

func _Quote_GetQuotes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QuoteRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QuoteServer).GetQuotes(m, &quoteGetQuotesServer{stream})
}

type Quote_GetQuotesServer interface {
	Send(*QuoteResponse) error
	grpc.ServerStream
}

type quoteGetQuotesServer struct {
	grpc.ServerStream
}

func (x *quoteGetQuotesServer) Send(m *QuoteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Quote_GetFilteredQuotes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QuoteRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QuoteServer).GetFilteredQuotes(m, &quoteGetFilteredQuotesServer{stream})
}

type Quote_GetFilteredQuotesServer interface {
	Send(*QuoteResponse) error
	grpc.ServerStream
}

type quoteGetFilteredQuotesServer struct {
	grpc.ServerStream
}

func (x *quoteGetFilteredQuotesServer) Send(m *QuoteResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Quote_ServiceDesc is the grpc.ServiceDesc for Quote service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Quote_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Quote",
	HandlerType: (*QuoteServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetQuotes",
			Handler:       _Quote_GetQuotes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetFilteredQuotes",
			Handler:       _Quote_GetFilteredQuotes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/quotes.proto",
}
